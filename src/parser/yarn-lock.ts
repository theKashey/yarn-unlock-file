import {load, dump} from "js-yaml";

export type YarnPackageDatabase = Record<string, { dependencies: Record<string, unknown> }>;

import * as lockfile from "@yarnpkg/lockfile";
import {extractPackageName} from "./utils";

export const yarnLockToDatabase = (data: string): YarnPackageDatabase => {
  if (data.includes('yarn lockfile v1')) {
    // yarn1 format
    const objects = lockfile.parse(data).object;
    return Object.entries(objects).reduce((acc, [name, {dependencies}]: any) => {
      acc[extractPackageName(name)] = {dependencies};
      return acc;
    }, {} as YarnPackageDatabase);
  }
  // it's lock v2 yaml
  const lockContent: any = load(data);

  return Object.entries(lockContent).reduce((acc, [name, {dependencies}]: any) => {
    if (name !== '__metadata') {
      acc[extractPackageName(name)] = {dependencies};
    }
    return acc;
  }, {} as YarnPackageDatabase);
}


const YARN2_HEADER = '# This file is generated by running "yarn install" inside your project.\n# Manual changes might be lost - proceed with caution!\n\n';

export const updateLock = (data: string, keepThose: Set<string>): string => {
  if (data.includes('yarn lockfile v1')) {
    // yarn1 format
    const objects = lockfile.parse(data).object;
    return lockfile.stringify(Object.fromEntries(Object.entries(objects).filter(([name]) => keepThose.has(extractPackageName(name)))))
  }
  // it's lock v2 yaml
  const lockContent: any = load(data);

  return `${YARN2_HEADER}${dump(Object.fromEntries(Object.entries(lockContent).filter(([name]) => (
    name === '__metadata' || keepThose.has(extractPackageName(name))
  ))), {quotingType: '"', lineWidth:-1})
  }`;
}