import * as lockfile from '@yarnpkg/lockfile';
import { load, dump } from 'js-yaml';

export type YarnPackageDatabase = Array<[name: string, details: { dependencies: Record<string, unknown> }]>;

import { extractPackageName } from './utils';

export const yarnLockToDatabase = (data: string): YarnPackageDatabase => {
  if (data.includes('yarn lockfile v1')) {
    // yarn1 format
    const objects = lockfile.parse(data).object;

    return Object.entries(objects).reduce((acc: YarnPackageDatabase, [name, { dependencies }]: any) => {
      acc.push([extractPackageName(name), { dependencies }]);

      return acc;
    }, []);
  }

  // it's lock v2 yaml
  const lockContent: any = load(data);

  return Object.entries(lockContent).reduce((acc: YarnPackageDatabase, [name, { dependencies }]: any) => {
    if (name !== '__metadata') {
      acc.push([extractPackageName(name), { dependencies }]);
    }

    return acc;
  }, []);
};

const YARN2_HEADER =
  '# This file is generated by running "yarn install" inside your project.\n# Manual changes might be lost - proceed with caution!\n\n';

const formatToLock = (data: string): string => {
  const result: string[] = [];

  data.split('\n').forEach((line) => {
    if (line[0] == '"') {
      result.push('');
    }

    result.push(line);
  });

  return result.join('\n');
};

export const updateLock = (data: string, keepThose: Set<string>): string => {
  if (data.includes('yarn lockfile v1')) {
    // yarn1 format
    const objects = lockfile.parse(data).object;

    return lockfile.stringify(
      Object.fromEntries(Object.entries(objects).filter(([name]) => keepThose.has(extractPackageName(name))))
    );
  }

  // it's lock v2 yaml
  const lockContent: any = load(data);

  return `${YARN2_HEADER}${formatToLock(
    dump(
      Object.fromEntries(
        Object.entries(lockContent).filter(([name]) => name === '__metadata' || keepThose.has(extractPackageName(name)))
      ),
      { quotingType: '"', lineWidth: -1 }
    )
  )}`;
};
